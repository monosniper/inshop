"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_tsparticles_esm_Plugins_PolygonMask_pathseg_js"],{

/***/ "./node_modules/tsparticles/esm/Plugins/PolygonMask/pathseg.js":
/*!*********************************************************************!*\
  !*** ./node_modules/tsparticles/esm/Plugins/PolygonMask/pathseg.js ***!
  \*********************************************************************/
/***/ (() => {

eval("\n(function () {\n    \"use strict\";\n    try {\n        if (typeof window === \"undefined\")\n            return;\n        if (!(\"SVGPathSeg\" in window)) {\n            window.SVGPathSeg = function (type, typeAsLetter, owningPathSegList) {\n                this.pathSegType = type;\n                this.pathSegTypeAsLetter = typeAsLetter;\n                this._owningPathSegList = owningPathSegList;\n            };\n            window.SVGPathSeg.prototype.classname = \"SVGPathSeg\";\n            window.SVGPathSeg.PATHSEG_UNKNOWN = 0;\n            window.SVGPathSeg.PATHSEG_CLOSEPATH = 1;\n            window.SVGPathSeg.PATHSEG_MOVETO_ABS = 2;\n            window.SVGPathSeg.PATHSEG_MOVETO_REL = 3;\n            window.SVGPathSeg.PATHSEG_LINETO_ABS = 4;\n            window.SVGPathSeg.PATHSEG_LINETO_REL = 5;\n            window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;\n            window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;\n            window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;\n            window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;\n            window.SVGPathSeg.PATHSEG_ARC_ABS = 10;\n            window.SVGPathSeg.PATHSEG_ARC_REL = 11;\n            window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;\n            window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;\n            window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;\n            window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;\n            window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;\n            window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;\n            window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;\n            window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;\n            window.SVGPathSeg.prototype._segmentChanged = function () {\n                if (this._owningPathSegList)\n                    this._owningPathSegList.segmentChanged(this);\n            };\n            window.SVGPathSegClosePath = function (owningPathSegList) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CLOSEPATH, \"z\", owningPathSegList);\n            };\n            window.SVGPathSegClosePath.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegClosePath.prototype.toString = function () {\n                return \"[object SVGPathSegClosePath]\";\n            };\n            window.SVGPathSegClosePath.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter;\n            };\n            window.SVGPathSegClosePath.prototype.clone = function () {\n                return new window.SVGPathSegClosePath(undefined);\n            };\n            window.SVGPathSegMovetoAbs = function (owningPathSegList, x, y) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_ABS, \"M\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n            };\n            window.SVGPathSegMovetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegMovetoAbs.prototype.toString = function () {\n                return \"[object SVGPathSegMovetoAbs]\";\n            };\n            window.SVGPathSegMovetoAbs.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._x + \" \" + this._y;\n            };\n            window.SVGPathSegMovetoAbs.prototype.clone = function () {\n                return new window.SVGPathSegMovetoAbs(undefined, this._x, this._y);\n            };\n            Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegMovetoRel = function (owningPathSegList, x, y) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_REL, \"m\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n            };\n            window.SVGPathSegMovetoRel.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegMovetoRel.prototype.toString = function () {\n                return \"[object SVGPathSegMovetoRel]\";\n            };\n            window.SVGPathSegMovetoRel.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._x + \" \" + this._y;\n            };\n            window.SVGPathSegMovetoRel.prototype.clone = function () {\n                return new window.SVGPathSegMovetoRel(undefined, this._x, this._y);\n            };\n            Object.defineProperty(window.SVGPathSegMovetoRel.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegMovetoRel.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegLinetoAbs = function (owningPathSegList, x, y) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_ABS, \"L\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n            };\n            window.SVGPathSegLinetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegLinetoAbs.prototype.toString = function () {\n                return \"[object SVGPathSegLinetoAbs]\";\n            };\n            window.SVGPathSegLinetoAbs.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._x + \" \" + this._y;\n            };\n            window.SVGPathSegLinetoAbs.prototype.clone = function () {\n                return new window.SVGPathSegLinetoAbs(undefined, this._x, this._y);\n            };\n            Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegLinetoRel = function (owningPathSegList, x, y) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_REL, \"l\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n            };\n            window.SVGPathSegLinetoRel.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegLinetoRel.prototype.toString = function () {\n                return \"[object SVGPathSegLinetoRel]\";\n            };\n            window.SVGPathSegLinetoRel.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._x + \" \" + this._y;\n            };\n            window.SVGPathSegLinetoRel.prototype.clone = function () {\n                return new window.SVGPathSegLinetoRel(undefined, this._x, this._y);\n            };\n            Object.defineProperty(window.SVGPathSegLinetoRel.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegLinetoRel.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegCurvetoCubicAbs = function (owningPathSegList, x, y, x1, y1, x2, y2) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, \"C\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n                this._x1 = x1;\n                this._y1 = y1;\n                this._x2 = x2;\n                this._y2 = y2;\n            };\n            window.SVGPathSegCurvetoCubicAbs.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegCurvetoCubicAbs.prototype.toString = function () {\n                return \"[object SVGPathSegCurvetoCubicAbs]\";\n            };\n            window.SVGPathSegCurvetoCubicAbs.prototype._asPathString = function () {\n                return (this.pathSegTypeAsLetter +\n                    \" \" +\n                    this._x1 +\n                    \" \" +\n                    this._y1 +\n                    \" \" +\n                    this._x2 +\n                    \" \" +\n                    this._y2 +\n                    \" \" +\n                    this._x +\n                    \" \" +\n                    this._y);\n            };\n            window.SVGPathSegCurvetoCubicAbs.prototype.clone = function () {\n                return new window.SVGPathSegCurvetoCubicAbs(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2);\n            };\n            Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, \"x1\", {\n                get: function () {\n                    return this._x1;\n                },\n                set: function (x1) {\n                    this._x1 = x1;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, \"y1\", {\n                get: function () {\n                    return this._y1;\n                },\n                set: function (y1) {\n                    this._y1 = y1;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, \"x2\", {\n                get: function () {\n                    return this._x2;\n                },\n                set: function (x2) {\n                    this._x2 = x2;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, \"y2\", {\n                get: function () {\n                    return this._y2;\n                },\n                set: function (y2) {\n                    this._y2 = y2;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegCurvetoCubicRel = function (owningPathSegList, x, y, x1, y1, x2, y2) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, \"c\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n                this._x1 = x1;\n                this._y1 = y1;\n                this._x2 = x2;\n                this._y2 = y2;\n            };\n            window.SVGPathSegCurvetoCubicRel.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegCurvetoCubicRel.prototype.toString = function () {\n                return \"[object SVGPathSegCurvetoCubicRel]\";\n            };\n            window.SVGPathSegCurvetoCubicRel.prototype._asPathString = function () {\n                return (this.pathSegTypeAsLetter +\n                    \" \" +\n                    this._x1 +\n                    \" \" +\n                    this._y1 +\n                    \" \" +\n                    this._x2 +\n                    \" \" +\n                    this._y2 +\n                    \" \" +\n                    this._x +\n                    \" \" +\n                    this._y);\n            };\n            window.SVGPathSegCurvetoCubicRel.prototype.clone = function () {\n                return new window.SVGPathSegCurvetoCubicRel(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2);\n            };\n            Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, \"x1\", {\n                get: function () {\n                    return this._x1;\n                },\n                set: function (x1) {\n                    this._x1 = x1;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, \"y1\", {\n                get: function () {\n                    return this._y1;\n                },\n                set: function (y1) {\n                    this._y1 = y1;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, \"x2\", {\n                get: function () {\n                    return this._x2;\n                },\n                set: function (x2) {\n                    this._x2 = x2;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, \"y2\", {\n                get: function () {\n                    return this._y2;\n                },\n                set: function (y2) {\n                    this._y2 = y2;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegCurvetoQuadraticAbs = function (owningPathSegList, x, y, x1, y1) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, \"Q\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n                this._x1 = x1;\n                this._y1 = y1;\n            };\n            window.SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegCurvetoQuadraticAbs.prototype.toString = function () {\n                return \"[object SVGPathSegCurvetoQuadraticAbs]\";\n            };\n            window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._x1 + \" \" + this._y1 + \" \" + this._x + \" \" + this._y;\n            };\n            window.SVGPathSegCurvetoQuadraticAbs.prototype.clone = function () {\n                return new window.SVGPathSegCurvetoQuadraticAbs(undefined, this._x, this._y, this._x1, this._y1);\n            };\n            Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, \"x1\", {\n                get: function () {\n                    return this._x1;\n                },\n                set: function (x1) {\n                    this._x1 = x1;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, \"y1\", {\n                get: function () {\n                    return this._y1;\n                },\n                set: function (y1) {\n                    this._y1 = y1;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegCurvetoQuadraticRel = function (owningPathSegList, x, y, x1, y1) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, \"q\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n                this._x1 = x1;\n                this._y1 = y1;\n            };\n            window.SVGPathSegCurvetoQuadraticRel.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegCurvetoQuadraticRel.prototype.toString = function () {\n                return \"[object SVGPathSegCurvetoQuadraticRel]\";\n            };\n            window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._x1 + \" \" + this._y1 + \" \" + this._x + \" \" + this._y;\n            };\n            window.SVGPathSegCurvetoQuadraticRel.prototype.clone = function () {\n                return new window.SVGPathSegCurvetoQuadraticRel(undefined, this._x, this._y, this._x1, this._y1);\n            };\n            Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, \"x1\", {\n                get: function () {\n                    return this._x1;\n                },\n                set: function (x1) {\n                    this._x1 = x1;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, \"y1\", {\n                get: function () {\n                    return this._y1;\n                },\n                set: function (y1) {\n                    this._y1 = y1;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegArcAbs = function (owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_ABS, \"A\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n                this._r1 = r1;\n                this._r2 = r2;\n                this._angle = angle;\n                this._largeArcFlag = largeArcFlag;\n                this._sweepFlag = sweepFlag;\n            };\n            window.SVGPathSegArcAbs.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegArcAbs.prototype.toString = function () {\n                return \"[object SVGPathSegArcAbs]\";\n            };\n            window.SVGPathSegArcAbs.prototype._asPathString = function () {\n                return (this.pathSegTypeAsLetter +\n                    \" \" +\n                    this._r1 +\n                    \" \" +\n                    this._r2 +\n                    \" \" +\n                    this._angle +\n                    \" \" +\n                    (this._largeArcFlag ? \"1\" : \"0\") +\n                    \" \" +\n                    (this._sweepFlag ? \"1\" : \"0\") +\n                    \" \" +\n                    this._x +\n                    \" \" +\n                    this._y);\n            };\n            window.SVGPathSegArcAbs.prototype.clone = function () {\n                return new window.SVGPathSegArcAbs(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);\n            };\n            Object.defineProperty(window.SVGPathSegArcAbs.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegArcAbs.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegArcAbs.prototype, \"r1\", {\n                get: function () {\n                    return this._r1;\n                },\n                set: function (r1) {\n                    this._r1 = r1;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegArcAbs.prototype, \"r2\", {\n                get: function () {\n                    return this._r2;\n                },\n                set: function (r2) {\n                    this._r2 = r2;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegArcAbs.prototype, \"angle\", {\n                get: function () {\n                    return this._angle;\n                },\n                set: function (angle) {\n                    this._angle = angle;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegArcAbs.prototype, \"largeArcFlag\", {\n                get: function () {\n                    return this._largeArcFlag;\n                },\n                set: function (largeArcFlag) {\n                    this._largeArcFlag = largeArcFlag;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegArcAbs.prototype, \"sweepFlag\", {\n                get: function () {\n                    return this._sweepFlag;\n                },\n                set: function (sweepFlag) {\n                    this._sweepFlag = sweepFlag;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegArcRel = function (owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_REL, \"a\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n                this._r1 = r1;\n                this._r2 = r2;\n                this._angle = angle;\n                this._largeArcFlag = largeArcFlag;\n                this._sweepFlag = sweepFlag;\n            };\n            window.SVGPathSegArcRel.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegArcRel.prototype.toString = function () {\n                return \"[object SVGPathSegArcRel]\";\n            };\n            window.SVGPathSegArcRel.prototype._asPathString = function () {\n                return (this.pathSegTypeAsLetter +\n                    \" \" +\n                    this._r1 +\n                    \" \" +\n                    this._r2 +\n                    \" \" +\n                    this._angle +\n                    \" \" +\n                    (this._largeArcFlag ? \"1\" : \"0\") +\n                    \" \" +\n                    (this._sweepFlag ? \"1\" : \"0\") +\n                    \" \" +\n                    this._x +\n                    \" \" +\n                    this._y);\n            };\n            window.SVGPathSegArcRel.prototype.clone = function () {\n                return new window.SVGPathSegArcRel(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);\n            };\n            Object.defineProperty(window.SVGPathSegArcRel.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegArcRel.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegArcRel.prototype, \"r1\", {\n                get: function () {\n                    return this._r1;\n                },\n                set: function (r1) {\n                    this._r1 = r1;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegArcRel.prototype, \"r2\", {\n                get: function () {\n                    return this._r2;\n                },\n                set: function (r2) {\n                    this._r2 = r2;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegArcRel.prototype, \"angle\", {\n                get: function () {\n                    return this._angle;\n                },\n                set: function (angle) {\n                    this._angle = angle;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegArcRel.prototype, \"largeArcFlag\", {\n                get: function () {\n                    return this._largeArcFlag;\n                },\n                set: function (largeArcFlag) {\n                    this._largeArcFlag = largeArcFlag;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegArcRel.prototype, \"sweepFlag\", {\n                get: function () {\n                    return this._sweepFlag;\n                },\n                set: function (sweepFlag) {\n                    this._sweepFlag = sweepFlag;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegLinetoHorizontalAbs = function (owningPathSegList, x) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, \"H\", owningPathSegList);\n                this._x = x;\n            };\n            window.SVGPathSegLinetoHorizontalAbs.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegLinetoHorizontalAbs.prototype.toString = function () {\n                return \"[object SVGPathSegLinetoHorizontalAbs]\";\n            };\n            window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._x;\n            };\n            window.SVGPathSegLinetoHorizontalAbs.prototype.clone = function () {\n                return new window.SVGPathSegLinetoHorizontalAbs(undefined, this._x);\n            };\n            Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegLinetoHorizontalRel = function (owningPathSegList, x) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, \"h\", owningPathSegList);\n                this._x = x;\n            };\n            window.SVGPathSegLinetoHorizontalRel.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegLinetoHorizontalRel.prototype.toString = function () {\n                return \"[object SVGPathSegLinetoHorizontalRel]\";\n            };\n            window.SVGPathSegLinetoHorizontalRel.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._x;\n            };\n            window.SVGPathSegLinetoHorizontalRel.prototype.clone = function () {\n                return new window.SVGPathSegLinetoHorizontalRel(undefined, this._x);\n            };\n            Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegLinetoVerticalAbs = function (owningPathSegList, y) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, \"V\", owningPathSegList);\n                this._y = y;\n            };\n            window.SVGPathSegLinetoVerticalAbs.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegLinetoVerticalAbs.prototype.toString = function () {\n                return \"[object SVGPathSegLinetoVerticalAbs]\";\n            };\n            window.SVGPathSegLinetoVerticalAbs.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._y;\n            };\n            window.SVGPathSegLinetoVerticalAbs.prototype.clone = function () {\n                return new window.SVGPathSegLinetoVerticalAbs(undefined, this._y);\n            };\n            Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegLinetoVerticalRel = function (owningPathSegList, y) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, \"v\", owningPathSegList);\n                this._y = y;\n            };\n            window.SVGPathSegLinetoVerticalRel.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegLinetoVerticalRel.prototype.toString = function () {\n                return \"[object SVGPathSegLinetoVerticalRel]\";\n            };\n            window.SVGPathSegLinetoVerticalRel.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._y;\n            };\n            window.SVGPathSegLinetoVerticalRel.prototype.clone = function () {\n                return new window.SVGPathSegLinetoVerticalRel(undefined, this._y);\n            };\n            Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegCurvetoCubicSmoothAbs = function (owningPathSegList, x, y, x2, y2) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, \"S\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n                this._x2 = x2;\n                this._y2 = y2;\n            };\n            window.SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function () {\n                return \"[object SVGPathSegCurvetoCubicSmoothAbs]\";\n            };\n            window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._x2 + \" \" + this._y2 + \" \" + this._x + \" \" + this._y;\n            };\n            window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function () {\n                return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, this._x, this._y, this._x2, this._y2);\n            };\n            Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, \"x2\", {\n                get: function () {\n                    return this._x2;\n                },\n                set: function (x2) {\n                    this._x2 = x2;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, \"y2\", {\n                get: function () {\n                    return this._y2;\n                },\n                set: function (y2) {\n                    this._y2 = y2;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegCurvetoCubicSmoothRel = function (owningPathSegList, x, y, x2, y2) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, \"s\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n                this._x2 = x2;\n                this._y2 = y2;\n            };\n            window.SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function () {\n                return \"[object SVGPathSegCurvetoCubicSmoothRel]\";\n            };\n            window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._x2 + \" \" + this._y2 + \" \" + this._x + \" \" + this._y;\n            };\n            window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function () {\n                return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, this._x, this._y, this._x2, this._y2);\n            };\n            Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, \"x2\", {\n                get: function () {\n                    return this._x2;\n                },\n                set: function (x2) {\n                    this._x2 = x2;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, \"y2\", {\n                get: function () {\n                    return this._y2;\n                },\n                set: function (y2) {\n                    this._y2 = y2;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegCurvetoQuadraticSmoothAbs = function (owningPathSegList, x, y) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, \"T\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n            };\n            window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function () {\n                return \"[object SVGPathSegCurvetoQuadraticSmoothAbs]\";\n            };\n            window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._x + \" \" + this._y;\n            };\n            window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function () {\n                return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, this._x, this._y);\n            };\n            Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegCurvetoQuadraticSmoothRel = function (owningPathSegList, x, y) {\n                window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, \"t\", owningPathSegList);\n                this._x = x;\n                this._y = y;\n            };\n            window.SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);\n            window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function () {\n                return \"[object SVGPathSegCurvetoQuadraticSmoothRel]\";\n            };\n            window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function () {\n                return this.pathSegTypeAsLetter + \" \" + this._x + \" \" + this._y;\n            };\n            window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function () {\n                return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, this._x, this._y);\n            };\n            Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, \"x\", {\n                get: function () {\n                    return this._x;\n                },\n                set: function (x) {\n                    this._x = x;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, \"y\", {\n                get: function () {\n                    return this._y;\n                },\n                set: function (y) {\n                    this._y = y;\n                    this._segmentChanged();\n                },\n                enumerable: true,\n            });\n            window.SVGPathElement.prototype.createSVGPathSegClosePath = function () {\n                return new window.SVGPathSegClosePath(undefined);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegMovetoAbs = function (x, y) {\n                return new window.SVGPathSegMovetoAbs(undefined, x, y);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegMovetoRel = function (x, y) {\n                return new window.SVGPathSegMovetoRel(undefined, x, y);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegLinetoAbs = function (x, y) {\n                return new window.SVGPathSegLinetoAbs(undefined, x, y);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegLinetoRel = function (x, y) {\n                return new window.SVGPathSegLinetoRel(undefined, x, y);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function (x, y, x1, y1, x2, y2) {\n                return new window.SVGPathSegCurvetoCubicAbs(undefined, x, y, x1, y1, x2, y2);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function (x, y, x1, y1, x2, y2) {\n                return new window.SVGPathSegCurvetoCubicRel(undefined, x, y, x1, y1, x2, y2);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function (x, y, x1, y1) {\n                return new window.SVGPathSegCurvetoQuadraticAbs(undefined, x, y, x1, y1);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function (x, y, x1, y1) {\n                return new window.SVGPathSegCurvetoQuadraticRel(undefined, x, y, x1, y1);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegArcAbs = function (x, y, r1, r2, angle, largeArcFlag, sweepFlag) {\n                return new window.SVGPathSegArcAbs(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegArcRel = function (x, y, r1, r2, angle, largeArcFlag, sweepFlag) {\n                return new window.SVGPathSegArcRel(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function (x) {\n                return new window.SVGPathSegLinetoHorizontalAbs(undefined, x);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function (x) {\n                return new window.SVGPathSegLinetoHorizontalRel(undefined, x);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function (y) {\n                return new window.SVGPathSegLinetoVerticalAbs(undefined, y);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function (y) {\n                return new window.SVGPathSegLinetoVerticalRel(undefined, y);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function (x, y, x2, y2) {\n                return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, x, y, x2, y2);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function (x, y, x2, y2) {\n                return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, x, y, x2, y2);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function (x, y) {\n                return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, x, y);\n            };\n            window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function (x, y) {\n                return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, x, y);\n            };\n            if (!(\"getPathSegAtLength\" in window.SVGPathElement.prototype)) {\n                window.SVGPathElement.prototype.getPathSegAtLength = function (distance) {\n                    if (distance === undefined || !isFinite(distance))\n                        throw \"Invalid arguments.\";\n                    const measurementElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                    measurementElement.setAttribute(\"d\", this.getAttribute(\"d\"));\n                    let lastPathSegment = measurementElement.pathSegList.numberOfItems - 1;\n                    if (lastPathSegment <= 0)\n                        return 0;\n                    do {\n                        measurementElement.pathSegList.removeItem(lastPathSegment);\n                        if (distance > measurementElement.getTotalLength())\n                            break;\n                        lastPathSegment--;\n                    } while (lastPathSegment > 0);\n                    return lastPathSegment;\n                };\n            }\n        }\n        if (!(\"SVGPathSegList\" in window) || !(\"appendItem\" in window.SVGPathSegList.prototype)) {\n            window.SVGPathSegList = function (pathElement) {\n                this._pathElement = pathElement;\n                this._list = this._parsePath(this._pathElement.getAttribute(\"d\"));\n                this._mutationObserverConfig = { attributes: true, attributeFilter: [\"d\"] };\n                this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));\n                this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);\n            };\n            window.SVGPathSegList.prototype.classname = \"SVGPathSegList\";\n            Object.defineProperty(window.SVGPathSegList.prototype, \"numberOfItems\", {\n                get: function () {\n                    this._checkPathSynchronizedToList();\n                    return this._list.length;\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathSegList.prototype, \"length\", {\n                get: function () {\n                    this._checkPathSynchronizedToList();\n                    return this._list.length;\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathElement.prototype, \"pathSegList\", {\n                get: function () {\n                    if (!this._pathSegList)\n                        this._pathSegList = new window.SVGPathSegList(this);\n                    return this._pathSegList;\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathElement.prototype, \"normalizedPathSegList\", {\n                get: function () {\n                    return this.pathSegList;\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathElement.prototype, \"animatedPathSegList\", {\n                get: function () {\n                    return this.pathSegList;\n                },\n                enumerable: true,\n            });\n            Object.defineProperty(window.SVGPathElement.prototype, \"animatedNormalizedPathSegList\", {\n                get: function () {\n                    return this.pathSegList;\n                },\n                enumerable: true,\n            });\n            window.SVGPathSegList.prototype._checkPathSynchronizedToList = function () {\n                this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords());\n            };\n            window.SVGPathSegList.prototype._updateListFromPathMutations = function (mutationRecords) {\n                if (!this._pathElement)\n                    return;\n                let hasPathMutations = false;\n                mutationRecords.forEach(function (record) {\n                    if (record.attributeName == \"d\")\n                        hasPathMutations = true;\n                });\n                if (hasPathMutations)\n                    this._list = this._parsePath(this._pathElement.getAttribute(\"d\"));\n            };\n            window.SVGPathSegList.prototype._writeListToPath = function () {\n                this._pathElementMutationObserver.disconnect();\n                this._pathElement.setAttribute(\"d\", window.SVGPathSegList._pathSegArrayAsString(this._list));\n                this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);\n            };\n            window.SVGPathSegList.prototype.segmentChanged = function (pathSeg) {\n                this._writeListToPath();\n            };\n            window.SVGPathSegList.prototype.clear = function () {\n                this._checkPathSynchronizedToList();\n                this._list.forEach(function (pathSeg) {\n                    pathSeg._owningPathSegList = null;\n                });\n                this._list = [];\n                this._writeListToPath();\n            };\n            window.SVGPathSegList.prototype.initialize = function (newItem) {\n                this._checkPathSynchronizedToList();\n                this._list = [newItem];\n                newItem._owningPathSegList = this;\n                this._writeListToPath();\n                return newItem;\n            };\n            window.SVGPathSegList.prototype._checkValidIndex = function (index) {\n                if (isNaN(index) || index < 0 || index >= this.numberOfItems)\n                    throw \"INDEX_SIZE_ERR\";\n            };\n            window.SVGPathSegList.prototype.getItem = function (index) {\n                this._checkPathSynchronizedToList();\n                this._checkValidIndex(index);\n                return this._list[index];\n            };\n            window.SVGPathSegList.prototype.insertItemBefore = function (newItem, index) {\n                this._checkPathSynchronizedToList();\n                if (index > this.numberOfItems)\n                    index = this.numberOfItems;\n                if (newItem._owningPathSegList) {\n                    newItem = newItem.clone();\n                }\n                this._list.splice(index, 0, newItem);\n                newItem._owningPathSegList = this;\n                this._writeListToPath();\n                return newItem;\n            };\n            window.SVGPathSegList.prototype.replaceItem = function (newItem, index) {\n                this._checkPathSynchronizedToList();\n                if (newItem._owningPathSegList) {\n                    newItem = newItem.clone();\n                }\n                this._checkValidIndex(index);\n                this._list[index] = newItem;\n                newItem._owningPathSegList = this;\n                this._writeListToPath();\n                return newItem;\n            };\n            window.SVGPathSegList.prototype.removeItem = function (index) {\n                this._checkPathSynchronizedToList();\n                this._checkValidIndex(index);\n                const item = this._list[index];\n                this._list.splice(index, 1);\n                this._writeListToPath();\n                return item;\n            };\n            window.SVGPathSegList.prototype.appendItem = function (newItem) {\n                this._checkPathSynchronizedToList();\n                if (newItem._owningPathSegList) {\n                    newItem = newItem.clone();\n                }\n                this._list.push(newItem);\n                newItem._owningPathSegList = this;\n                this._writeListToPath();\n                return newItem;\n            };\n            window.SVGPathSegList._pathSegArrayAsString = function (pathSegArray) {\n                let string = \"\";\n                let first = true;\n                pathSegArray.forEach(function (pathSeg) {\n                    if (first) {\n                        first = false;\n                        string += pathSeg._asPathString();\n                    }\n                    else {\n                        string += \" \" + pathSeg._asPathString();\n                    }\n                });\n                return string;\n            };\n            window.SVGPathSegList.prototype._parsePath = function (string) {\n                if (!string || string.length == 0)\n                    return [];\n                const owningPathSegList = this;\n                const Builder = function () {\n                    this.pathSegList = [];\n                };\n                Builder.prototype.appendSegment = function (pathSeg) {\n                    this.pathSegList.push(pathSeg);\n                };\n                const Source = function (string) {\n                    this._string = string;\n                    this._currentIndex = 0;\n                    this._endIndex = this._string.length;\n                    this._previousCommand = window.SVGPathSeg.PATHSEG_UNKNOWN;\n                    this._skipOptionalSpaces();\n                };\n                Source.prototype._isCurrentSpace = function () {\n                    const character = this._string[this._currentIndex];\n                    return (character <= \" \" &&\n                        (character == \" \" ||\n                            character == \"\\n\" ||\n                            character == \"\\t\" ||\n                            character == \"\\r\" ||\n                            character == \"\\f\"));\n                };\n                Source.prototype._skipOptionalSpaces = function () {\n                    while (this._currentIndex < this._endIndex && this._isCurrentSpace())\n                        this._currentIndex++;\n                    return this._currentIndex < this._endIndex;\n                };\n                Source.prototype._skipOptionalSpacesOrDelimiter = function () {\n                    if (this._currentIndex < this._endIndex &&\n                        !this._isCurrentSpace() &&\n                        this._string.charAt(this._currentIndex) != \",\")\n                        return false;\n                    if (this._skipOptionalSpaces()) {\n                        if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == \",\") {\n                            this._currentIndex++;\n                            this._skipOptionalSpaces();\n                        }\n                    }\n                    return this._currentIndex < this._endIndex;\n                };\n                Source.prototype.hasMoreData = function () {\n                    return this._currentIndex < this._endIndex;\n                };\n                Source.prototype.peekSegmentType = function () {\n                    const lookahead = this._string[this._currentIndex];\n                    return this._pathSegTypeFromChar(lookahead);\n                };\n                Source.prototype._pathSegTypeFromChar = function (lookahead) {\n                    switch (lookahead) {\n                        case \"Z\":\n                        case \"z\":\n                            return window.SVGPathSeg.PATHSEG_CLOSEPATH;\n                        case \"M\":\n                            return window.SVGPathSeg.PATHSEG_MOVETO_ABS;\n                        case \"m\":\n                            return window.SVGPathSeg.PATHSEG_MOVETO_REL;\n                        case \"L\":\n                            return window.SVGPathSeg.PATHSEG_LINETO_ABS;\n                        case \"l\":\n                            return window.SVGPathSeg.PATHSEG_LINETO_REL;\n                        case \"C\":\n                            return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;\n                        case \"c\":\n                            return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;\n                        case \"Q\":\n                            return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;\n                        case \"q\":\n                            return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;\n                        case \"A\":\n                            return window.SVGPathSeg.PATHSEG_ARC_ABS;\n                        case \"a\":\n                            return window.SVGPathSeg.PATHSEG_ARC_REL;\n                        case \"H\":\n                            return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;\n                        case \"h\":\n                            return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;\n                        case \"V\":\n                            return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;\n                        case \"v\":\n                            return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;\n                        case \"S\":\n                            return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;\n                        case \"s\":\n                            return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;\n                        case \"T\":\n                            return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;\n                        case \"t\":\n                            return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;\n                        default:\n                            return window.SVGPathSeg.PATHSEG_UNKNOWN;\n                    }\n                };\n                Source.prototype._nextCommandHelper = function (lookahead, previousCommand) {\n                    if ((lookahead == \"+\" ||\n                        lookahead == \"-\" ||\n                        lookahead == \".\" ||\n                        (lookahead >= \"0\" && lookahead <= \"9\")) &&\n                        previousCommand != window.SVGPathSeg.PATHSEG_CLOSEPATH) {\n                        if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_ABS)\n                            return window.SVGPathSeg.PATHSEG_LINETO_ABS;\n                        if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_REL)\n                            return window.SVGPathSeg.PATHSEG_LINETO_REL;\n                        return previousCommand;\n                    }\n                    return window.SVGPathSeg.PATHSEG_UNKNOWN;\n                };\n                Source.prototype.initialCommandIsMoveTo = function () {\n                    if (!this.hasMoreData())\n                        return true;\n                    const command = this.peekSegmentType();\n                    return (command == window.SVGPathSeg.PATHSEG_MOVETO_ABS ||\n                        command == window.SVGPathSeg.PATHSEG_MOVETO_REL);\n                };\n                Source.prototype._parseNumber = function () {\n                    let exponent = 0;\n                    let integer = 0;\n                    let frac = 1;\n                    let decimal = 0;\n                    let sign = 1;\n                    let expsign = 1;\n                    const startIndex = this._currentIndex;\n                    this._skipOptionalSpaces();\n                    if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == \"+\")\n                        this._currentIndex++;\n                    else if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == \"-\") {\n                        this._currentIndex++;\n                        sign = -1;\n                    }\n                    if (this._currentIndex == this._endIndex ||\n                        ((this._string.charAt(this._currentIndex) < \"0\" ||\n                            this._string.charAt(this._currentIndex) > \"9\") &&\n                            this._string.charAt(this._currentIndex) != \".\"))\n                        return undefined;\n                    const startIntPartIndex = this._currentIndex;\n                    while (this._currentIndex < this._endIndex &&\n                        this._string.charAt(this._currentIndex) >= \"0\" &&\n                        this._string.charAt(this._currentIndex) <= \"9\")\n                        this._currentIndex++;\n                    if (this._currentIndex != startIntPartIndex) {\n                        let scanIntPartIndex = this._currentIndex - 1;\n                        let multiplier = 1;\n                        while (scanIntPartIndex >= startIntPartIndex) {\n                            integer += multiplier * (this._string.charAt(scanIntPartIndex--) - \"0\");\n                            multiplier *= 10;\n                        }\n                    }\n                    if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == \".\") {\n                        this._currentIndex++;\n                        if (this._currentIndex >= this._endIndex ||\n                            this._string.charAt(this._currentIndex) < \"0\" ||\n                            this._string.charAt(this._currentIndex) > \"9\")\n                            return undefined;\n                        while (this._currentIndex < this._endIndex &&\n                            this._string.charAt(this._currentIndex) >= \"0\" &&\n                            this._string.charAt(this._currentIndex) <= \"9\") {\n                            frac *= 10;\n                            decimal += (this._string.charAt(this._currentIndex) - \"0\") / frac;\n                            this._currentIndex += 1;\n                        }\n                    }\n                    if (this._currentIndex != startIndex &&\n                        this._currentIndex + 1 < this._endIndex &&\n                        (this._string.charAt(this._currentIndex) == \"e\" ||\n                            this._string.charAt(this._currentIndex) == \"E\") &&\n                        this._string.charAt(this._currentIndex + 1) != \"x\" &&\n                        this._string.charAt(this._currentIndex + 1) != \"m\") {\n                        this._currentIndex++;\n                        if (this._string.charAt(this._currentIndex) == \"+\") {\n                            this._currentIndex++;\n                        }\n                        else if (this._string.charAt(this._currentIndex) == \"-\") {\n                            this._currentIndex++;\n                            expsign = -1;\n                        }\n                        if (this._currentIndex >= this._endIndex ||\n                            this._string.charAt(this._currentIndex) < \"0\" ||\n                            this._string.charAt(this._currentIndex) > \"9\")\n                            return undefined;\n                        while (this._currentIndex < this._endIndex &&\n                            this._string.charAt(this._currentIndex) >= \"0\" &&\n                            this._string.charAt(this._currentIndex) <= \"9\") {\n                            exponent *= 10;\n                            exponent += this._string.charAt(this._currentIndex) - \"0\";\n                            this._currentIndex++;\n                        }\n                    }\n                    let number = integer + decimal;\n                    number *= sign;\n                    if (exponent)\n                        number *= Math.pow(10, expsign * exponent);\n                    if (startIndex == this._currentIndex)\n                        return undefined;\n                    this._skipOptionalSpacesOrDelimiter();\n                    return number;\n                };\n                Source.prototype._parseArcFlag = function () {\n                    if (this._currentIndex >= this._endIndex)\n                        return undefined;\n                    let flag = false;\n                    const flagChar = this._string.charAt(this._currentIndex++);\n                    if (flagChar == \"0\")\n                        flag = false;\n                    else if (flagChar == \"1\")\n                        flag = true;\n                    else\n                        return undefined;\n                    this._skipOptionalSpacesOrDelimiter();\n                    return flag;\n                };\n                Source.prototype.parseSegment = function () {\n                    const lookahead = this._string[this._currentIndex];\n                    let command = this._pathSegTypeFromChar(lookahead);\n                    if (command == window.SVGPathSeg.PATHSEG_UNKNOWN) {\n                        if (this._previousCommand == window.SVGPathSeg.PATHSEG_UNKNOWN)\n                            return null;\n                        command = this._nextCommandHelper(lookahead, this._previousCommand);\n                        if (command == window.SVGPathSeg.PATHSEG_UNKNOWN)\n                            return null;\n                    }\n                    else {\n                        this._currentIndex++;\n                    }\n                    this._previousCommand = command;\n                    let points;\n                    switch (command) {\n                        case window.SVGPathSeg.PATHSEG_MOVETO_REL:\n                            return new window.SVGPathSegMovetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());\n                        case window.SVGPathSeg.PATHSEG_MOVETO_ABS:\n                            return new window.SVGPathSegMovetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());\n                        case window.SVGPathSeg.PATHSEG_LINETO_REL:\n                            return new window.SVGPathSegLinetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());\n                        case window.SVGPathSeg.PATHSEG_LINETO_ABS:\n                            return new window.SVGPathSegLinetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());\n                        case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                            return new window.SVGPathSegLinetoHorizontalRel(owningPathSegList, this._parseNumber());\n                        case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                            return new window.SVGPathSegLinetoHorizontalAbs(owningPathSegList, this._parseNumber());\n                        case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                            return new window.SVGPathSegLinetoVerticalRel(owningPathSegList, this._parseNumber());\n                        case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                            return new window.SVGPathSegLinetoVerticalAbs(owningPathSegList, this._parseNumber());\n                        case window.SVGPathSeg.PATHSEG_CLOSEPATH:\n                            this._skipOptionalSpaces();\n                            return new window.SVGPathSegClosePath(owningPathSegList);\n                        case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                            points = {\n                                x1: this._parseNumber(),\n                                y1: this._parseNumber(),\n                                x2: this._parseNumber(),\n                                y2: this._parseNumber(),\n                                x: this._parseNumber(),\n                                y: this._parseNumber(),\n                            };\n                            return new window.SVGPathSegCurvetoCubicRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);\n                        case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                            points = {\n                                x1: this._parseNumber(),\n                                y1: this._parseNumber(),\n                                x2: this._parseNumber(),\n                                y2: this._parseNumber(),\n                                x: this._parseNumber(),\n                                y: this._parseNumber(),\n                            };\n                            return new window.SVGPathSegCurvetoCubicAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);\n                        case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                            points = {\n                                x2: this._parseNumber(),\n                                y2: this._parseNumber(),\n                                x: this._parseNumber(),\n                                y: this._parseNumber(),\n                            };\n                            return new window.SVGPathSegCurvetoCubicSmoothRel(owningPathSegList, points.x, points.y, points.x2, points.y2);\n                        case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                            points = {\n                                x2: this._parseNumber(),\n                                y2: this._parseNumber(),\n                                x: this._parseNumber(),\n                                y: this._parseNumber(),\n                            };\n                            return new window.SVGPathSegCurvetoCubicSmoothAbs(owningPathSegList, points.x, points.y, points.x2, points.y2);\n                        case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                            points = {\n                                x1: this._parseNumber(),\n                                y1: this._parseNumber(),\n                                x: this._parseNumber(),\n                                y: this._parseNumber(),\n                            };\n                            return new window.SVGPathSegCurvetoQuadraticRel(owningPathSegList, points.x, points.y, points.x1, points.y1);\n                        case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                            points = {\n                                x1: this._parseNumber(),\n                                y1: this._parseNumber(),\n                                x: this._parseNumber(),\n                                y: this._parseNumber(),\n                            };\n                            return new window.SVGPathSegCurvetoQuadraticAbs(owningPathSegList, points.x, points.y, points.x1, points.y1);\n                        case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n                            return new window.SVGPathSegCurvetoQuadraticSmoothRel(owningPathSegList, this._parseNumber(), this._parseNumber());\n                        case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n                            return new window.SVGPathSegCurvetoQuadraticSmoothAbs(owningPathSegList, this._parseNumber(), this._parseNumber());\n                        case window.SVGPathSeg.PATHSEG_ARC_REL:\n                            points = {\n                                x1: this._parseNumber(),\n                                y1: this._parseNumber(),\n                                arcAngle: this._parseNumber(),\n                                arcLarge: this._parseArcFlag(),\n                                arcSweep: this._parseArcFlag(),\n                                x: this._parseNumber(),\n                                y: this._parseNumber(),\n                            };\n                            return new window.SVGPathSegArcRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);\n                        case window.SVGPathSeg.PATHSEG_ARC_ABS:\n                            points = {\n                                x1: this._parseNumber(),\n                                y1: this._parseNumber(),\n                                arcAngle: this._parseNumber(),\n                                arcLarge: this._parseArcFlag(),\n                                arcSweep: this._parseArcFlag(),\n                                x: this._parseNumber(),\n                                y: this._parseNumber(),\n                            };\n                            return new window.SVGPathSegArcAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);\n                        default:\n                            throw \"Unknown path seg type.\";\n                    }\n                };\n                const builder = new Builder();\n                const source = new Source(string);\n                if (!source.initialCommandIsMoveTo())\n                    return [];\n                while (source.hasMoreData()) {\n                    const pathSeg = source.parseSegment();\n                    if (!pathSeg)\n                        return [];\n                    builder.appendSegment(pathSeg);\n                }\n                return builder.pathSegList;\n            };\n        }\n    }\n    catch (e) {\n        console.warn(\"An error occurred in tsParticles pathseg polyfill. If the Polygon Mask is not working, please open an issue here: https://github.com/matteobruni/tsparticles\", e);\n    }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvZXNtL1BsdWdpbnMvUG9seWdvbk1hc2svcGF0aHNlZy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvZXNtL1BsdWdpbnMvUG9seWdvbk1hc2svcGF0aHNlZy5qcz84NjY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKCEoXCJTVkdQYXRoU2VnXCIgaW4gd2luZG93KSkge1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcgPSBmdW5jdGlvbiAodHlwZSwgdHlwZUFzTGV0dGVyLCBvd25pbmdQYXRoU2VnTGlzdCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aFNlZ1R5cGUgPSB0eXBlO1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciA9IHR5cGVBc0xldHRlcjtcbiAgICAgICAgICAgICAgICB0aGlzLl9vd25pbmdQYXRoU2VnTGlzdCA9IG93bmluZ1BhdGhTZWdMaXN0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLnByb3RvdHlwZS5jbGFzc25hbWUgPSBcIlNWR1BhdGhTZWdcIjtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfVU5LTk9XTiA9IDA7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NMT1NFUEFUSCA9IDE7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX01PVkVUT19BQlMgPSAyO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fUkVMID0gMztcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0FCUyA9IDQ7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19SRUwgPSA1O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX0FCUyA9IDY7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fQ1VCSUNfUkVMID0gNztcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfQUJTID0gODtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfUkVMID0gOTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQVJDX0FCUyA9IDEwO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19BUkNfUkVMID0gMTE7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19IT1JJWk9OVEFMX0FCUyA9IDEyO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9SRUwgPSAxMztcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX0FCUyA9IDE0O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfUkVMID0gMTU7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fQ1VCSUNfU01PT1RIX0FCUyA9IDE2O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9SRUwgPSAxNztcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfU01PT1RIX0FCUyA9IDE4O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19TTU9PVEhfUkVMID0gMTk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUuX3NlZ21lbnRDaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vd25pbmdQYXRoU2VnTGlzdClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3duaW5nUGF0aFNlZ0xpc3Quc2VnbWVudENoYW5nZWQodGhpcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDbG9zZVBhdGggPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ0xPU0VQQVRILCBcInpcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ2xvc2VQYXRoLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUod2luZG93LlNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ2xvc2VQYXRoLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDbG9zZVBhdGhdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDbG9zZVBhdGgucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlcjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0Nsb3NlUGF0aC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0Nsb3NlUGF0aCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvQWJzID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB4LCB5KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX01PVkVUT19BQlMsIFwiTVwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdNb3ZldG9BYnMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdNb3ZldG9BYnMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ01vdmV0b0Fic11cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ01vdmV0b0Ficy5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvQWJzLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvQWJzKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvQWJzLnByb3RvdHlwZSwgXCJ4XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3g7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvQWJzLnByb3RvdHlwZSwgXCJ5XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3k7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdNb3ZldG9SZWwgPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHkpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTU9WRVRPX1JFTCwgXCJtXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ01vdmV0b1JlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHdpbmRvdy5TVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ01vdmV0b1JlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW29iamVjdCBTVkdQYXRoU2VnTW92ZXRvUmVsXVwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvUmVsLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3ggKyBcIiBcIiArIHRoaXMuX3k7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdNb3ZldG9SZWwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdNb3ZldG9SZWwodW5kZWZpbmVkLCB0aGlzLl94LCB0aGlzLl95KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdNb3ZldG9SZWwucHJvdG90eXBlLCBcInhcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdNb3ZldG9SZWwucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0FicyA9IGZ1bmN0aW9uIChvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fQUJTLCBcIkxcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvQWJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUod2luZG93LlNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvQWJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdMaW5ldG9BYnNdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9BYnMucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feCArIFwiIFwiICsgdGhpcy5feTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0Ficy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0Ficyh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3kpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0Ficy5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0Ficy5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvUmVsID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB4LCB5KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19SRUwsIFwibFwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9SZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9SZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0xpbmV0b1JlbF1cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1JlbC5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvUmVsLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvUmVsKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvUmVsLnByb3RvdHlwZSwgXCJ4XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3g7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvUmVsLnByb3RvdHlwZSwgXCJ5XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3k7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMgPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHksIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fQ1VCSUNfQUJTLCBcIkNcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgIHRoaXMuX3gxID0geDE7XG4gICAgICAgICAgICAgICAgdGhpcy5feTEgPSB5MTtcbiAgICAgICAgICAgICAgICB0aGlzLl94MiA9IHgyO1xuICAgICAgICAgICAgICAgIHRoaXMuX3kyID0geTI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Fic11cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficy5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feDEgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kxICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94MiArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feTIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDEsIHRoaXMuX3kxLCB0aGlzLl94MiwgdGhpcy5feTIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficy5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficy5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficy5wcm90b3R5cGUsIFwieDFcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4MSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94MSA9IHgxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzLnByb3RvdHlwZSwgXCJ5MVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95MTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kxID0geTE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMucHJvdG90eXBlLCBcIngyXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3gyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeDIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feDIgPSB4MjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficy5wcm90b3R5cGUsIFwieTJcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTI7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5Mikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95MiA9IHkyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwgPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHksIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fQ1VCSUNfUkVMLCBcImNcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgIHRoaXMuX3gxID0geDE7XG4gICAgICAgICAgICAgICAgdGhpcy5feTEgPSB5MTtcbiAgICAgICAgICAgICAgICB0aGlzLl94MiA9IHgyO1xuICAgICAgICAgICAgICAgIHRoaXMuX3kyID0geTI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbF1cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbC5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feDEgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kxICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94MiArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feTIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDEsIHRoaXMuX3kxLCB0aGlzLl94MiwgdGhpcy5feTIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbC5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbC5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbC5wcm90b3R5cGUsIFwieDFcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4MSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94MSA9IHgxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsLnByb3RvdHlwZSwgXCJ5MVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95MTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kxID0geTE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlLCBcIngyXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3gyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeDIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feDIgPSB4MjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbC5wcm90b3R5cGUsIFwieTJcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTI7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5Mikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95MiA9IHkyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB4LCB5LCB4MSwgeTEpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfQUJTLCBcIlFcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgIHRoaXMuX3gxID0geDE7XG4gICAgICAgICAgICAgICAgdGhpcy5feTEgPSB5MTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzXVwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficy5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94MSArIFwiIFwiICsgdGhpcy5feTEgKyBcIiBcIiArIHRoaXMuX3ggKyBcIiBcIiArIHRoaXMuX3k7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficyh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gxLCB0aGlzLl95MSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficy5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzLnByb3RvdHlwZSwgXCJ4MVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94MTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3gxID0geDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzLnByb3RvdHlwZSwgXCJ5MVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95MTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kxID0geTE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwgPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHksIHgxLCB5MSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19SRUwsIFwicVwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgdGhpcy5feDEgPSB4MTtcbiAgICAgICAgICAgICAgICB0aGlzLl95MSA9IHkxO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHdpbmRvdy5TVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWxdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3gxICsgXCIgXCIgKyB0aGlzLl95MSArIFwiIFwiICsgdGhpcy5feCArIFwiIFwiICsgdGhpcy5feTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDEsIHRoaXMuX3kxKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsLnByb3RvdHlwZSwgXCJ4XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3g7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbC5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwucHJvdG90eXBlLCBcIngxXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3gxO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feDEgPSB4MTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwucHJvdG90eXBlLCBcInkxXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3kxO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feTEgPSB5MTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQXJjQWJzID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB4LCB5LCByMSwgcjIsIGFuZ2xlLCBsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZykge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19BUkNfQUJTLCBcIkFcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgIHRoaXMuX3IxID0gcjE7XG4gICAgICAgICAgICAgICAgdGhpcy5fcjIgPSByMjtcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmdsZSA9IGFuZ2xlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhcmdlQXJjRmxhZyA9IGxhcmdlQXJjRmxhZztcbiAgICAgICAgICAgICAgICB0aGlzLl9zd2VlcEZsYWcgPSBzd2VlcEZsYWc7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdBcmNBYnMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdBcmNBYnMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0FyY0Fic11cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcjEgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3IyICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmdsZSArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuX2xhcmdlQXJjRmxhZyA/IFwiMVwiIDogXCIwXCIpICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5fc3dlZXBGbGFnID8gXCIxXCIgOiBcIjBcIikgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQXJjQWJzLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQXJjQWJzKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSwgdGhpcy5fcjEsIHRoaXMuX3IyLCB0aGlzLl9hbmdsZSwgdGhpcy5fbGFyZ2VBcmNGbGFnLCB0aGlzLl9zd2VlcEZsYWcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUsIFwicjFcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcjE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChyMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yMSA9IHIxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQXJjQWJzLnByb3RvdHlwZSwgXCJyMlwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yMjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHIyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3IyID0gcjI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdBcmNBYnMucHJvdG90eXBlLCBcImFuZ2xlXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FuZ2xlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoYW5nbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5nbGUgPSBhbmdsZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUsIFwibGFyZ2VBcmNGbGFnXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xhcmdlQXJjRmxhZztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGxhcmdlQXJjRmxhZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXJnZUFyY0ZsYWcgPSBsYXJnZUFyY0ZsYWc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdBcmNBYnMucHJvdG90eXBlLCBcInN3ZWVwRmxhZ1wiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zd2VlcEZsYWc7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzd2VlcEZsYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3dlZXBGbGFnID0gc3dlZXBGbGFnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdBcmNSZWwgPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHksIHIxLCByMiwgYW5nbGUsIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0FSQ19SRUwsIFwiYVwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcjEgPSByMTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yMiA9IHIyO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FuZ2xlID0gYW5nbGU7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFyZ2VBcmNGbGFnID0gbGFyZ2VBcmNGbGFnO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N3ZWVwRmxhZyA9IHN3ZWVwRmxhZztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0FyY1JlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHdpbmRvdy5TVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0FyY1JlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW29iamVjdCBTVkdQYXRoU2VnQXJjUmVsXVwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQXJjUmVsLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yMSArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcjIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuZ2xlICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5fbGFyZ2VBcmNGbGFnID8gXCIxXCIgOiBcIjBcIikgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLl9zd2VlcEZsYWcgPyBcIjFcIiA6IFwiMFwiKSArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feCArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdBcmNSZWwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdBcmNSZWwodW5kZWZpbmVkLCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl9yMSwgdGhpcy5fcjIsIHRoaXMuX2FuZ2xlLCB0aGlzLl9sYXJnZUFyY0ZsYWcsIHRoaXMuX3N3ZWVwRmxhZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQXJjUmVsLnByb3RvdHlwZSwgXCJ4XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3g7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQXJjUmVsLnByb3RvdHlwZSwgXCJ5XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3k7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQXJjUmVsLnByb3RvdHlwZSwgXCJyMVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yMTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHIxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3IxID0gcjE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdBcmNSZWwucHJvdG90eXBlLCBcInIyXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3IyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAocjIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcjIgPSByMjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0FyY1JlbC5wcm90b3R5cGUsIFwiYW5nbGVcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5nbGU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmdsZSA9IGFuZ2xlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQXJjUmVsLnByb3RvdHlwZSwgXCJsYXJnZUFyY0ZsYWdcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFyZ2VBcmNGbGFnO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAobGFyZ2VBcmNGbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xhcmdlQXJjRmxhZyA9IGxhcmdlQXJjRmxhZztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0FyY1JlbC5wcm90b3R5cGUsIFwic3dlZXBGbGFnXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N3ZWVwRmxhZztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHN3ZWVwRmxhZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zd2VlcEZsYWcgPSBzd2VlcEZsYWc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMgPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QsIHgpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0hPUklaT05UQUxfQUJTLCBcIkhcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHdpbmRvdy5TVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnNdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsQWJzLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3g7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsQWJzLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicyh1bmRlZmluZWQsIHRoaXMuX3gpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMucHJvdG90eXBlLCBcInhcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwgPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QsIHgpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0hPUklaT05UQUxfUkVMLCBcImhcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbFJlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHdpbmRvdy5TVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWxdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsUmVsLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3g7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsUmVsLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbFJlbCh1bmRlZmluZWQsIHRoaXMuX3gpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwucHJvdG90eXBlLCBcInhcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB5KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19WRVJUSUNBTF9BQlMsIFwiVlwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHdpbmRvdy5TVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFic11cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3k7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzKHVuZGVmaW5lZCwgdGhpcy5feSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsUmVsID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB5KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19WRVJUSUNBTF9SRUwsIFwidlwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHdpbmRvdy5TVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsUmVsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbF1cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsUmVsLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3k7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsUmVsKHVuZGVmaW5lZCwgdGhpcy5feSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvVmVydGljYWxSZWwucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicyA9IGZ1bmN0aW9uIChvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSwgeDIsIHkyKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fQ1VCSUNfU01PT1RIX0FCUywgXCJTXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICB0aGlzLl94MiA9IHgyO1xuICAgICAgICAgICAgICAgIHRoaXMuX3kyID0geTI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFic11cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicy5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94MiArIFwiIFwiICsgdGhpcy5feTIgKyBcIiBcIiArIHRoaXMuX3ggKyBcIiBcIiArIHRoaXMuX3k7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnModW5kZWZpbmVkLCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl94MiwgdGhpcy5feTIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicy5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicy5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicy5wcm90b3R5cGUsIFwieDJcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDI7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4Mikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94MiA9IHgyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzLnByb3RvdHlwZSwgXCJ5MlwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95MjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kyID0geTI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbCA9IGZ1bmN0aW9uIChvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSwgeDIsIHkyKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fQ1VCSUNfU01PT1RIX1JFTCwgXCJzXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICB0aGlzLl94MiA9IHgyO1xuICAgICAgICAgICAgICAgIHRoaXMuX3kyID0geTI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbF1cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbC5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94MiArIFwiIFwiICsgdGhpcy5feTIgKyBcIiBcIiArIHRoaXMuX3ggKyBcIiBcIiArIHRoaXMuX3k7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwodW5kZWZpbmVkLCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl94MiwgdGhpcy5feTIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbC5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbC5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbC5wcm90b3R5cGUsIFwieDJcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDI7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4Mikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94MiA9IHgyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsLnByb3RvdHlwZSwgXCJ5MlwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95MjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kyID0geTI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMgPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHkpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfU01PT1RIX0FCUywgXCJUXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzXVwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicy5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnModW5kZWZpbmVkLCB0aGlzLl94LCB0aGlzLl95KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzLnByb3RvdHlwZSwgXCJ4XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3g7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicy5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aFJlbCA9IGZ1bmN0aW9uIChvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19TTU9PVEhfUkVMLCBcInRcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aFJlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHdpbmRvdy5TVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWxdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3ggKyBcIiBcIiArIHRoaXMuX3k7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aFJlbCh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3kpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwucHJvdG90eXBlLCBcInhcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsLnByb3RvdHlwZSwgXCJ5XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3k7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQ2xvc2VQYXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDbG9zZVBhdGgodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdNb3ZldG9BYnMgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdNb3ZldG9BYnModW5kZWZpbmVkLCB4LCB5KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdNb3ZldG9SZWwgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdNb3ZldG9SZWwodW5kZWZpbmVkLCB4LCB5KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9BYnMgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9BYnModW5kZWZpbmVkLCB4LCB5KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9SZWwgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9SZWwodW5kZWZpbmVkLCB4LCB5KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMgPSBmdW5jdGlvbiAoeCwgeSwgeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzKHVuZGVmaW5lZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbCA9IGZ1bmN0aW9uICh4LCB5LCB4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwodW5kZWZpbmVkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0FicyA9IGZ1bmN0aW9uICh4LCB5LCB4MSwgeTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficyh1bmRlZmluZWQsIHgsIHksIHgxLCB5MSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbCA9IGZ1bmN0aW9uICh4LCB5LCB4MSwgeTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbCh1bmRlZmluZWQsIHgsIHksIHgxLCB5MSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQXJjQWJzID0gZnVuY3Rpb24gKHgsIHksIHIxLCByMiwgYW5nbGUsIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0FyY0Ficyh1bmRlZmluZWQsIHgsIHksIHIxLCByMiwgYW5nbGUsIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdBcmNSZWwgPSBmdW5jdGlvbiAoeCwgeSwgcjEsIHIyLCBhbmdsZSwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQXJjUmVsKHVuZGVmaW5lZCwgeCwgeSwgcjEsIHIyLCBhbmdsZSwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsQWJzKHVuZGVmaW5lZCwgeCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbFJlbCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwodW5kZWZpbmVkLCB4KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicyA9IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzKHVuZGVmaW5lZCwgeSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnTGluZXRvVmVydGljYWxSZWwgPSBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbCh1bmRlZmluZWQsIHkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicyA9IGZ1bmN0aW9uICh4LCB5LCB4MiwgeTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzKHVuZGVmaW5lZCwgeCwgeSwgeDIsIHkyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwgPSBmdW5jdGlvbiAoeCwgeSwgeDIsIHkyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbCh1bmRlZmluZWQsIHgsIHksIHgyLCB5Mik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnModW5kZWZpbmVkLCB4LCB5KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aFJlbCh1bmRlZmluZWQsIHgsIHkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghKFwiZ2V0UGF0aFNlZ0F0TGVuZ3RoXCIgaW4gd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZSkpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmdldFBhdGhTZWdBdExlbmd0aCA9IGZ1bmN0aW9uIChkaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2UgPT09IHVuZGVmaW5lZCB8fCAhaXNGaW5pdGUoZGlzdGFuY2UpKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJJbnZhbGlkIGFyZ3VtZW50cy5cIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVhc3VyZW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJwYXRoXCIpO1xuICAgICAgICAgICAgICAgICAgICBtZWFzdXJlbWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZFwiLCB0aGlzLmdldEF0dHJpYnV0ZShcImRcIikpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdFBhdGhTZWdtZW50ID0gbWVhc3VyZW1lbnRFbGVtZW50LnBhdGhTZWdMaXN0Lm51bWJlck9mSXRlbXMgLSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdFBhdGhTZWdtZW50IDw9IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZW1lbnRFbGVtZW50LnBhdGhTZWdMaXN0LnJlbW92ZUl0ZW0obGFzdFBhdGhTZWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IG1lYXN1cmVtZW50RWxlbWVudC5nZXRUb3RhbExlbmd0aCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBhdGhTZWdtZW50LS07XG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKGxhc3RQYXRoU2VnbWVudCA+IDApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFBhdGhTZWdtZW50O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoXCJTVkdQYXRoU2VnTGlzdFwiIGluIHdpbmRvdykgfHwgIShcImFwcGVuZEl0ZW1cIiBpbiB3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlKSkge1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaXN0ID0gZnVuY3Rpb24gKHBhdGhFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGF0aEVsZW1lbnQgPSBwYXRoRWxlbWVudDtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ID0gdGhpcy5fcGFyc2VQYXRoKHRoaXMuX3BhdGhFbGVtZW50LmdldEF0dHJpYnV0ZShcImRcIikpO1xuICAgICAgICAgICAgICAgIHRoaXMuX211dGF0aW9uT2JzZXJ2ZXJDb25maWcgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIGF0dHJpYnV0ZUZpbHRlcjogW1wiZFwiXSB9O1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhdGhFbGVtZW50TXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuX3VwZGF0ZUxpc3RGcm9tUGF0aE11dGF0aW9ucy5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXRoRWxlbWVudE11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9wYXRoRWxlbWVudCwgdGhpcy5fbXV0YXRpb25PYnNlcnZlckNvbmZpZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5jbGFzc25hbWUgPSBcIlNWR1BhdGhTZWdMaXN0XCI7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZSwgXCJudW1iZXJPZkl0ZW1zXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tQYXRoU3luY2hyb25pemVkVG9MaXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLCBcImxlbmd0aFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlzdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZSwgXCJwYXRoU2VnTGlzdFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcGF0aFNlZ0xpc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXRoU2VnTGlzdCA9IG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXRoU2VnTGlzdDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLCBcIm5vcm1hbGl6ZWRQYXRoU2VnTGlzdFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhTZWdMaXN0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUsIFwiYW5pbWF0ZWRQYXRoU2VnTGlzdFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhTZWdMaXN0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUsIFwiYW5pbWF0ZWROb3JtYWxpemVkUGF0aFNlZ0xpc3RcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnTGlzdDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUuX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVMaXN0RnJvbVBhdGhNdXRhdGlvbnModGhpcy5fcGF0aEVsZW1lbnRNdXRhdGlvbk9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUuX3VwZGF0ZUxpc3RGcm9tUGF0aE11dGF0aW9ucyA9IGZ1bmN0aW9uIChtdXRhdGlvblJlY29yZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3BhdGhFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgbGV0IGhhc1BhdGhNdXRhdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBtdXRhdGlvblJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNvcmQuYXR0cmlidXRlTmFtZSA9PSBcImRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc1BhdGhNdXRhdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChoYXNQYXRoTXV0YXRpb25zKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saXN0ID0gdGhpcy5fcGFyc2VQYXRoKHRoaXMuX3BhdGhFbGVtZW50LmdldEF0dHJpYnV0ZShcImRcIikpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUuX3dyaXRlTGlzdFRvUGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXRoRWxlbWVudE11dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhdGhFbGVtZW50LnNldEF0dHJpYnV0ZShcImRcIiwgd2luZG93LlNWR1BhdGhTZWdMaXN0Ll9wYXRoU2VnQXJyYXlBc1N0cmluZyh0aGlzLl9saXN0KSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGF0aEVsZW1lbnRNdXRhdGlvbk9ic2VydmVyLm9ic2VydmUodGhpcy5fcGF0aEVsZW1lbnQsIHRoaXMuX211dGF0aW9uT2JzZXJ2ZXJDb25maWcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUuc2VnbWVudENoYW5nZWQgPSBmdW5jdGlvbiAocGF0aFNlZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlTGlzdFRvUGF0aCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tQYXRoU3luY2hyb25pemVkVG9MaXN0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChwYXRoU2VnKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGhTZWcuX293bmluZ1BhdGhTZWdMaXN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5fd3JpdGVMaXN0VG9QYXRoKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKG5ld0l0ZW0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1BhdGhTeW5jaHJvbml6ZWRUb0xpc3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ID0gW25ld0l0ZW1dO1xuICAgICAgICAgICAgICAgIG5ld0l0ZW0uX293bmluZ1BhdGhTZWdMaXN0ID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzLl93cml0ZUxpc3RUb1BhdGgoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3SXRlbTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLl9jaGVja1ZhbGlkSW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oaW5kZXgpIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLm51bWJlck9mSXRlbXMpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFwiSU5ERVhfU0laRV9FUlJcIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLmdldEl0ZW0gPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1BhdGhTeW5jaHJvbml6ZWRUb0xpc3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1ZhbGlkSW5kZXgoaW5kZXgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0W2luZGV4XTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLmluc2VydEl0ZW1CZWZvcmUgPSBmdW5jdGlvbiAobmV3SXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1BhdGhTeW5jaHJvbml6ZWRUb0xpc3QoKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiB0aGlzLm51bWJlck9mSXRlbXMpXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5udW1iZXJPZkl0ZW1zO1xuICAgICAgICAgICAgICAgIGlmIChuZXdJdGVtLl9vd25pbmdQYXRoU2VnTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3SXRlbS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0LnNwbGljZShpbmRleCwgMCwgbmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgbmV3SXRlbS5fb3duaW5nUGF0aFNlZ0xpc3QgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlTGlzdFRvUGF0aCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdJdGVtO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUucmVwbGFjZUl0ZW0gPSBmdW5jdGlvbiAobmV3SXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1BhdGhTeW5jaHJvbml6ZWRUb0xpc3QoKTtcbiAgICAgICAgICAgICAgICBpZiAobmV3SXRlbS5fb3duaW5nUGF0aFNlZ0xpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ld0l0ZW0uY2xvbmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tWYWxpZEluZGV4KGluZGV4KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0W2luZGV4XSA9IG5ld0l0ZW07XG4gICAgICAgICAgICAgICAgbmV3SXRlbS5fb3duaW5nUGF0aFNlZ0xpc3QgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlTGlzdFRvUGF0aCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdJdGVtO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrVmFsaWRJbmRleChpbmRleCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuX2xpc3RbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93cml0ZUxpc3RUb1BhdGgoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLmFwcGVuZEl0ZW0gPSBmdW5jdGlvbiAobmV3SXRlbSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCgpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdJdGVtLl9vd25pbmdQYXRoU2VnTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3SXRlbS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0LnB1c2gobmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgbmV3SXRlbS5fb3duaW5nUGF0aFNlZ0xpc3QgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlTGlzdFRvUGF0aCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdJdGVtO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5fcGF0aFNlZ0FycmF5QXNTdHJpbmcgPSBmdW5jdGlvbiAocGF0aFNlZ0FycmF5KSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0cmluZyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBwYXRoU2VnQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAocGF0aFNlZykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gcGF0aFNlZy5fYXNQYXRoU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gXCIgXCIgKyBwYXRoU2VnLl9hc1BhdGhTdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5fcGFyc2VQYXRoID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgICAgIGlmICghc3RyaW5nIHx8IHN0cmluZy5sZW5ndGggPT0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IG93bmluZ1BhdGhTZWdMaXN0ID0gdGhpcztcbiAgICAgICAgICAgICAgICBjb25zdCBCdWlsZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhdGhTZWdMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmRTZWdtZW50ID0gZnVuY3Rpb24gKHBhdGhTZWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXRoU2VnTGlzdC5wdXNoKHBhdGhTZWcpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgU291cmNlID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJpbmcgPSBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuZEluZGV4ID0gdGhpcy5fc3RyaW5nLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNDb21tYW5kID0gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19VTktOT1dOO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9za2lwT3B0aW9uYWxTcGFjZXMoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuX2lzQ3VycmVudFNwYWNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXIgPSB0aGlzLl9zdHJpbmdbdGhpcy5fY3VycmVudEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjaGFyYWN0ZXIgPD0gXCIgXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChjaGFyYWN0ZXIgPT0gXCIgXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgPT0gXCJcXG5cIiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciA9PSBcIlxcdFwiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyID09IFwiXFxyXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgPT0gXCJcXGZcIikpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgU291cmNlLnByb3RvdHlwZS5fc2tpcE9wdGlvbmFsU3BhY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXggJiYgdGhpcy5faXNDdXJyZW50U3BhY2UoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXg7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLl9za2lwT3B0aW9uYWxTcGFjZXNPckRlbGltaXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRJbmRleCA8IHRoaXMuX2VuZEluZGV4ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5faXNDdXJyZW50U3BhY2UoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpICE9IFwiLFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2tpcE9wdGlvbmFsU3BhY2VzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleCAmJiB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPT0gXCIsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9za2lwT3B0aW9uYWxTcGFjZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXg7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLmhhc01vcmVEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXg7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLnBlZWtTZWdtZW50VHlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9va2FoZWFkID0gdGhpcy5fc3RyaW5nW3RoaXMuX2N1cnJlbnRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXRoU2VnVHlwZUZyb21DaGFyKGxvb2thaGVhZCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLl9wYXRoU2VnVHlwZUZyb21DaGFyID0gZnVuY3Rpb24gKGxvb2thaGVhZCkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGxvb2thaGVhZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlpcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ0xPU0VQQVRIO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fQUJTO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fUkVMO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fQUJTO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fUkVMO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX0FCUztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19SRUw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX0FCUztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfUkVMO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19BUkNfQUJTO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19BUkNfUkVMO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkhcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9BQlM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19IT1JJWk9OVEFMX1JFTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJWXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX0FCUztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ2XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX1JFTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJTXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19TTU9PVEhfQUJTO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9SRUw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiVFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9BQlM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwidFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9SRUw7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX1VOS05PV047XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuX25leHRDb21tYW5kSGVscGVyID0gZnVuY3Rpb24gKGxvb2thaGVhZCwgcHJldmlvdXNDb21tYW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgobG9va2FoZWFkID09IFwiK1wiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBsb29rYWhlYWQgPT0gXCItXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvb2thaGVhZCA9PSBcIi5cIiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGxvb2thaGVhZCA+PSBcIjBcIiAmJiBsb29rYWhlYWQgPD0gXCI5XCIpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21tYW5kICE9IHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ0xPU0VQQVRIKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNDb21tYW5kID09IHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTU9WRVRPX0FCUylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fQUJTO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzQ29tbWFuZCA9PSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX01PVkVUT19SRUwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1JFTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c0NvbW1hbmQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfVU5LTk9XTjtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuaW5pdGlhbENvbW1hbmRJc01vdmVUbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc01vcmVEYXRhKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IHRoaXMucGVla1NlZ21lbnRUeXBlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoY29tbWFuZCA9PSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX01PVkVUT19BQlMgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgPT0gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fUkVMKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuX3BhcnNlTnVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXhwb25lbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW50ZWdlciA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmcmFjID0gMTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlY2ltYWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2lnbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGxldCBleHBzaWduID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IHRoaXMuX2N1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2tpcE9wdGlvbmFsU3BhY2VzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleCAmJiB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPT0gXCIrXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXggJiYgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpID09IFwiLVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ24gPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudEluZGV4ID09IHRoaXMuX2VuZEluZGV4IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoKHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA8IFwiMFwiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpID4gXCI5XCIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpICE9IFwiLlwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0SW50UGFydEluZGV4ID0gdGhpcy5fY3VycmVudEluZGV4O1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA+PSBcIjBcIiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpIDw9IFwiOVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50SW5kZXggIT0gc3RhcnRJbnRQYXJ0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY2FuSW50UGFydEluZGV4ID0gdGhpcy5fY3VycmVudEluZGV4IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtdWx0aXBsaWVyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzY2FuSW50UGFydEluZGV4ID49IHN0YXJ0SW50UGFydEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWdlciArPSBtdWx0aXBsaWVyICogKHRoaXMuX3N0cmluZy5jaGFyQXQoc2NhbkludFBhcnRJbmRleC0tKSAtIFwiMFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsaWVyICo9IDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleCAmJiB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRJbmRleCA+PSB0aGlzLl9lbmRJbmRleCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA8IFwiMFwiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpID4gXCI5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA+PSBcIjBcIiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA8PSBcIjlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWMgKj0gMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjaW1hbCArPSAodGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpIC0gXCIwXCIpIC8gZnJhYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudEluZGV4ICE9IHN0YXJ0SW5kZXggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCArIDEgPCB0aGlzLl9lbmRJbmRleCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA9PSBcImVcIiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA9PSBcIkVcIikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4ICsgMSkgIT0gXCJ4XCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4ICsgMSkgIT0gXCJtXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA9PSBcIitcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpID09IFwiLVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwc2lnbiA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRJbmRleCA+PSB0aGlzLl9lbmRJbmRleCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA8IFwiMFwiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpID4gXCI5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA+PSBcIjBcIiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA8PSBcIjlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cG9uZW50ICo9IDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cG9uZW50ICs9IHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSAtIFwiMFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBudW1iZXIgPSBpbnRlZ2VyICsgZGVjaW1hbDtcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyICo9IHNpZ247XG4gICAgICAgICAgICAgICAgICAgIGlmIChleHBvbmVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlciAqPSBNYXRoLnBvdygxMCwgZXhwc2lnbiAqIGV4cG9uZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0SW5kZXggPT0gdGhpcy5fY3VycmVudEluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2tpcE9wdGlvbmFsU3BhY2VzT3JEZWxpbWl0ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuX3BhcnNlQXJjRmxhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRJbmRleCA+PSB0aGlzLl9lbmRJbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZsYWdDaGFyID0gdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgrKyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbGFnQ2hhciA9PSBcIjBcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZmxhZ0NoYXIgPT0gXCIxXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2tpcE9wdGlvbmFsU3BhY2VzT3JEZWxpbWl0ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZsYWc7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLnBhcnNlU2VnbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9va2FoZWFkID0gdGhpcy5fc3RyaW5nW3RoaXMuX2N1cnJlbnRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb21tYW5kID0gdGhpcy5fcGF0aFNlZ1R5cGVGcm9tQ2hhcihsb29rYWhlYWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWFuZCA9PSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX1VOS05PV04pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcmV2aW91c0NvbW1hbmQgPT0gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19VTktOT1dOKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IHRoaXMuX25leHRDb21tYW5kSGVscGVyKGxvb2thaGVhZCwgdGhpcy5fcHJldmlvdXNDb21tYW5kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21tYW5kID09IHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfVU5LTk9XTilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzQ29tbWFuZCA9IGNvbW1hbmQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwb2ludHM7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY29tbWFuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX01PVkVUT19SRUw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ01vdmV0b1JlbChvd25pbmdQYXRoU2VnTGlzdCwgdGhpcy5fcGFyc2VOdW1iZXIoKSwgdGhpcy5fcGFyc2VOdW1iZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTU9WRVRPX0FCUzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvQWJzKG93bmluZ1BhdGhTZWdMaXN0LCB0aGlzLl9wYXJzZU51bWJlcigpLCB0aGlzLl9wYXJzZU51bWJlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fUkVMOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9SZWwob3duaW5nUGF0aFNlZ0xpc3QsIHRoaXMuX3BhcnNlTnVtYmVyKCksIHRoaXMuX3BhcnNlTnVtYmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19BQlM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0Ficyhvd25pbmdQYXRoU2VnTGlzdCwgdGhpcy5fcGFyc2VOdW1iZXIoKSwgdGhpcy5fcGFyc2VOdW1iZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0hPUklaT05UQUxfUkVMOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsUmVsKG93bmluZ1BhdGhTZWdMaXN0LCB0aGlzLl9wYXJzZU51bWJlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9BQlM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHRoaXMuX3BhcnNlTnVtYmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19WRVJUSUNBTF9SRUw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsUmVsKG93bmluZ1BhdGhTZWdMaXN0LCB0aGlzLl9wYXJzZU51bWJlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfQUJTOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicyhvd25pbmdQYXRoU2VnTGlzdCwgdGhpcy5fcGFyc2VOdW1iZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ0xPU0VQQVRIOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NraXBPcHRpb25hbFNwYWNlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDbG9zZVBhdGgob3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fQ1VCSUNfUkVMOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDE6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxOiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MjogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTI6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsKG93bmluZ1BhdGhTZWdMaXN0LCBwb2ludHMueCwgcG9pbnRzLnksIHBvaW50cy54MSwgcG9pbnRzLnkxLCBwb2ludHMueDIsIHBvaW50cy55Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19BQlM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyOiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MjogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHBvaW50cy54LCBwb2ludHMueSwgcG9pbnRzLngxLCBwb2ludHMueTEsIHBvaW50cy54MiwgcG9pbnRzLnkyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9SRUw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MjogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTI6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsKG93bmluZ1BhdGhTZWdMaXN0LCBwb2ludHMueCwgcG9pbnRzLnksIHBvaW50cy54MiwgcG9pbnRzLnkyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9BQlM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MjogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTI6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzKG93bmluZ1BhdGhTZWdMaXN0LCBwb2ludHMueCwgcG9pbnRzLnksIHBvaW50cy54MiwgcG9pbnRzLnkyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19SRUw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbChvd25pbmdQYXRoU2VnTGlzdCwgcG9pbnRzLngsIHBvaW50cy55LCBwb2ludHMueDEsIHBvaW50cy55MSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfQUJTOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDE6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxOiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHBvaW50cy54LCBwb2ludHMueSwgcG9pbnRzLngxLCBwb2ludHMueTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9SRUw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwob3duaW5nUGF0aFNlZ0xpc3QsIHRoaXMuX3BhcnNlTnVtYmVyKCksIHRoaXMuX3BhcnNlTnVtYmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9BQlM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHRoaXMuX3BhcnNlTnVtYmVyKCksIHRoaXMuX3BhcnNlTnVtYmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0FSQ19SRUw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY0FuZ2xlOiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmNMYXJnZTogdGhpcy5fcGFyc2VBcmNGbGFnKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY1N3ZWVwOiB0aGlzLl9wYXJzZUFyY0ZsYWcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdBcmNSZWwob3duaW5nUGF0aFNlZ0xpc3QsIHBvaW50cy54LCBwb2ludHMueSwgcG9pbnRzLngxLCBwb2ludHMueTEsIHBvaW50cy5hcmNBbmdsZSwgcG9pbnRzLmFyY0xhcmdlLCBwb2ludHMuYXJjU3dlZXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0FSQ19BQlM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY0FuZ2xlOiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmNMYXJnZTogdGhpcy5fcGFyc2VBcmNGbGFnKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY1N3ZWVwOiB0aGlzLl9wYXJzZUFyY0ZsYWcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdBcmNBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHBvaW50cy54LCBwb2ludHMueSwgcG9pbnRzLngxLCBwb2ludHMueTEsIHBvaW50cy5hcmNBbmdsZSwgcG9pbnRzLmFyY0xhcmdlLCBwb2ludHMuYXJjU3dlZXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIlVua25vd24gcGF0aCBzZWcgdHlwZS5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgYnVpbGRlciA9IG5ldyBCdWlsZGVyKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gbmV3IFNvdXJjZShzdHJpbmcpO1xuICAgICAgICAgICAgICAgIGlmICghc291cmNlLmluaXRpYWxDb21tYW5kSXNNb3ZlVG8oKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIHdoaWxlIChzb3VyY2UuaGFzTW9yZURhdGEoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoU2VnID0gc291cmNlLnBhcnNlU2VnbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhdGhTZWcpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuYXBwZW5kU2VnbWVudChwYXRoU2VnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIucGF0aFNlZ0xpc3Q7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkFuIGVycm9yIG9jY3VycmVkIGluIHRzUGFydGljbGVzIHBhdGhzZWcgcG9seWZpbGwuIElmIHRoZSBQb2x5Z29uIE1hc2sgaXMgbm90IHdvcmtpbmcsIHBsZWFzZSBvcGVuIGFuIGlzc3VlIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0ZW9icnVuaS90c3BhcnRpY2xlc1wiLCBlKTtcbiAgICB9XG59KSgpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/tsparticles/esm/Plugins/PolygonMask/pathseg.js\n");

/***/ })

}]);